package compression.grammargenerator;
import compression.data.DatasetFileIOException;
import compression.grammar.*;
import compression.parser.GrammarReaderNWriter;

import java.io.File;
import java.io.IOException;
import java.util.*;

public class AutoGeneratedGrammars {
    int noOfNonTerminals;
    public AutoGeneratedGrammars(int noOfNonterminals){
        this.noOfNonTerminals=noOfNonterminals;
    }


    public Map<Integer, Rule> generateRules()
    {
        //Map<Integer, List<Rule>> intToRuleMap= new HashMap<>();
        Map<Integer, Rule> intToRuleMap= new HashMap<>();

        // for (int n=0; n<=noOfNonTerminals; n++){
        //List<Rule> listOfRules = new ArrayList<>();


        int ruleIndex=0;
        int i=0,j=0,l=0;

        List<Category> categoryList=new ArrayList<Category>();
        CharTerminal OP = new CharTerminal('(');
        CharTerminal CL = new CharTerminal(')');
        CharTerminal DT = new CharTerminal('.');

        int nonTerminalIndex=noOfNonTerminals-1;

        while(i<=nonTerminalIndex){
            StringBuilder lhs = new StringBuilder();
            lhs.append("A");
            lhs.append(i);


            intToRuleMap.put(ruleIndex, Rule.create(new NonTerminal(lhs.toString()), DT));//type 2 rule
            ruleIndex++;


            while(j<=nonTerminalIndex){
                StringBuilder sb_j= new StringBuilder();
                sb_j.append("A");
                sb_j.append(j);


                intToRuleMap.put(ruleIndex,Rule.create(new NonTerminal(lhs.toString()), OP, new NonTerminal(sb_j.toString()), CL));//type 3 rule
                ruleIndex++;

                if(j<i) {

                    intToRuleMap.put(ruleIndex,Rule.create(new NonTerminal(lhs.toString()), new NonTerminal(sb_j.toString())));
                    ruleIndex++;
                }

                while(l<=nonTerminalIndex){


                    StringBuilder sb_l = new StringBuilder();
                    sb_l.append("A");
                    sb_l.append(l);

                    categoryList=new ArrayList<>();
                    categoryList.add(new NonTerminal(sb_j.toString()));
                    categoryList.add(new NonTerminal(sb_l.toString()));

                    intToRuleMap.put(ruleIndex,Rule.create(new NonTerminal(lhs.toString()),new NonTerminal(sb_j.toString()),new NonTerminal(sb_l.toString())));//type 1 rule
                    ruleIndex++;

                    l++;
                }
                l=0;
                j++;
            }
            j=0; l=0;
            i++;
        }

        //  }
        //System.out.println("intToRuleMap :"+ intToRuleMap);

        return intToRuleMap;
            }




    public static void printMap(Map<Integer, Rule> integerRuleMap){
        for(Integer integer: integerRuleMap.keySet()){
            System.out.println(integer + ": ");

                System.out.println( integerRuleMap.get(integer));
            System.out.println();
        }
    }
}
