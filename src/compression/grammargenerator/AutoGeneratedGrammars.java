package compression.grammargenerator;

import compression.grammar.*;

import java.util.*;

/**
 * Helper class for generating all possible SRF rules.
 */
public class AutoGeneratedGrammars {

	public static List<Rule> generateAllRules(int noOfNonTerminals) {
		List<Rule> res = new ArrayList<>();

		int i = 0, j = 0, l = 0;

		CharTerminal OP = new CharTerminal('(');
		CharTerminal CL = new CharTerminal(')');
		CharTerminal DT = new CharTerminal('.');

		int nonTerminalIndex = noOfNonTerminals - 1;

		while (i <= nonTerminalIndex) {
			NonTerminal lhs = new NonTerminal("A" + i);
			res.add(Rule.create(lhs, DT)); // type 2 rule

			while (j <= nonTerminalIndex) {
				NonTerminal Aj = new NonTerminal("A" + j);
				res.add(Rule.create(lhs, OP, Aj, CL)); //type 3 rule
				if (j < i) {
					res.add(Rule.create(lhs, Aj));
				}
				while (l <= nonTerminalIndex) {
					NonTerminal Al = new NonTerminal("A" + l);
					res.add(Rule.create(lhs, Aj, Al)); //type 1 rule
					l++;
				}
				l = 0;
				j++;
			}
			j = 0;
			i++;
		}

		return res;
	}


	public static void printMap(Map<Integer, Rule> integerRuleMap) {
		for (Integer integer : integerRuleMap.keySet()) {
			System.out.println(integer + ": ");

			System.out.println(integerRuleMap.get(integer));
			System.out.println();
		}
	}
}
